var LakeListVM = function(inFilters) {	var self = this;	this.filters = inFilters;	this.setCurrentLake = function(theLake) {		viewModel.setCurrentLake(theLake);	};	this.filteredLakes = ko.computed(function() {		var filtered = [];		viewModel.lakes().forEach(function(aLake) {			if ("" != aLake.area()) {				if (self.filters.areaFilters()[aLake.area()]()) {					if (self.hasChosenSpecies(aLake)) {						//If the name matches the search string...// console.log("Name: " + aLake.name() + "==(" + self.filters.searchStr() + ")==>" + 	// (-1 != aLake.name().search(""+self.filters.searchStr())));						if (-1 != aLake.name().search(""+self.filters.searchStr())) {							filtered[filtered.length] = aLake;						}					};				};			};		});		return filtered;	});	this.hasChosenSpecies = function(theLake) {		if (0 < theLake.species().length) {			for (var i = 0; i < self.filters.speciesFilters().length; i++) {				var sFilter = self.filters.speciesFilters()[i];			//self.speciesFilters().some(function(sFilter) {//console.log("checking: " + sFilter().name() + " against " + theLake.name());				if (sFilter().value()) {					if (-1 != $.inArray(sFilter().name(), theLake.species())) {//console.log("  found!");						return true;					};				};				//return false;			};		};		return false;	};	this.loadLakeData = function() {		LakeData.forEach(function(aLake) {//console.log("loading:" + aLake.name);			var info = new LakeInfo(aLake.name, aLake.href);			info.county(aLake.county);			info.latlon(aLake.latlon);			info.area(aLake.area);			aLake.species.forEach(function(aSpecies) {				info.species.push(aSpecies);				//If not there already, add species to speciesFilters...				self.filters.addSpeciesFilter(aSpecies);			});			viewModel.buildMapMarker(info);			viewModel.lakes.push(info);		});		self.filters.setInitialSpeciesFilterThreshold(10);	};};