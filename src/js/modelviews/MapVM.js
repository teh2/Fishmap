var MapVM = function() {	var self = this;	this.map; //Note: the map is not an observable. Why?	this.infoWindow;	this.selectedLake;	this.selectedMarker;	this.setMap = function(aMap) {		self.map = aMap;	};	// this.normalFishIcon = {						// path: "M 0 5 C 5 0 5 0 20 10 C 17 5 17 5 20 0 C 5 10 5 10 0 5 z",						// fillColor: 'green',						// fillOpacity: 0.9,						// strokeColor: 'darkgreen'						// };	// this.selectedFishIcon = {						// path: "M 0 5 C 5 0 5 0 20 10 C 17 5 17 5 20 0 C 5 10 5 10 0 5 z",						// fillColor: 'lime',						// fillOpacity: 0.9,						// strokeColor: 'green'						// };	this.getIconUrl = function(aLake) {		if (0 < aLake.species().length) {			return "images/fishicon.png";		}		else {			return "images/unkfishicon.png";		};	};	this.getSelectedIconUrl = function(aLake) {		if (0 < aLake.species().length) {			return "images/selfishicon.png";		}		else {			return "images/unkselfishicon.png";		};	};	this.buildMarker = function(aLake) {		if (0 < aLake.latlon().length) {			var nums = aLake.latlon().split(",");			var ll = new google.maps.LatLng(nums[0], nums[1]);			var img = {				url: self.getIconUrl(aLake),				size: new google.maps.Size(32, 32),				origin: new google.maps.Point(0,0),				anchor: new google.maps.Point(20, 16)			};			var marker = new google.maps.Marker({				map: null,				position: ll,				title: aLake.name(),				icon: img			});			aLake.marker(marker);			google.maps.event.addListener(marker, 'click', function() {				viewModel.setCurrentLake(aLake);			});		};	};	this.loadMapApi = function() {//console.log("loadMapApi");		var script = document.createElement('script');		script.type = 'text/javascript';		script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyC5nj4Q9nLWhbewfJYIjARH-HheRPHCKgE' +			'&callback=showMap'; //&signed_in=true		document.body.appendChild(script);	};	this.removeMapMarkers = function() {		viewModel.lakes().forEach(function(aLake) {			if (aLake.marker()) {				aLake.marker().setMap(null);			}		});	};	this.addMapMarkers = function() {		var bounds = new google.maps.LatLngBounds();		bounds.extend(self.map.getCenter());		viewModel.getFilteredLakes().forEach(function(aLake) {			if (typeof aLake.marker() !== "undefined") {				aLake.marker().setMap(self.map);				bounds.extend(aLake.marker().getPosition());			};		});		self.map.fitBounds(bounds);	};	this.wireUpMapMarkers = function() {		//This next line is quite a special case. It has to refer to		//the ko.computed itself, and not the array that is typically		//returned from it. Decoupling this VM from that one would be		//significantly more trouble than it's worth.		lakeListVM.filteredLakes.subscribe(function(newList) {			self.removeMapMarkers();			self.addMapMarkers();		});	};	this.displayInfo = function() {//console.log("displayInfo");		self.unselectMarker();		self.infoWindow.setContent($('#lakeDetails').html());		self.selectedLake = viewModel.getCurrentLake();		self.selectMarker();		self.infoWindow.open(self.map, self.selectedLake.marker());		viewModel.setLocation(self.selectedLake.lat(), self.selectedLake.lon());	};	this.unselectMarker = function() {		if (typeof self.selectedMarker === 'undefined') { return; };		var img = {			url: self.getIconUrl(self.selectedLake),			size: new google.maps.Size(32, 32),			origin: new google.maps.Point(0,0),			anchor: new google.maps.Point(20, 16)		};		self.selectedMarker.setIcon(img);	};	this.selectMarker = function() {		self.selectedMarker = self.selectedLake.marker();		var img = {			url: self.getSelectedIconUrl(self.selectedLake),			size: new google.maps.Size(32, 32),			origin: new google.maps.Point(0,0),			anchor: new google.maps.Point(20, 16)		};		self.selectedMarker.setIcon(img);	};}function showMap() {console.log("showMap");	//move the code in here to a more appropriate place	// (like into the mapVM and the viewModel)	var mapOptions = {		center: { lat: 42.105287, lng: -87.939661},		zoom: 8	};	var mapView = $('#mapView')[0];	mapVM.setMap(new google.maps.Map(mapView, mapOptions));	mapVM.infoWindow = new google.maps.InfoWindow({		content: $('#lakeDetails').html()	});		viewModel.init();};